// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: api/TopService.proto

package TopService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopServiceClient is the client API for TopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopServiceClient interface {
	StreamSnapshots(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (TopService_StreamSnapshotsClient, error)
}

type topServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopServiceClient(cc grpc.ClientConnInterface) TopServiceClient {
	return &topServiceClient{cc}
}

func (c *topServiceClient) StreamSnapshots(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (TopService_StreamSnapshotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TopService_ServiceDesc.Streams[0], "/topService.TopService/StreamSnapshots", opts...)
	if err != nil {
		return nil, err
	}
	x := &topServiceStreamSnapshotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopService_StreamSnapshotsClient interface {
	Recv() (*Snapshot, error)
	grpc.ClientStream
}

type topServiceStreamSnapshotsClient struct {
	grpc.ClientStream
}

func (x *topServiceStreamSnapshotsClient) Recv() (*Snapshot, error) {
	m := new(Snapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopServiceServer is the server API for TopService service.
// All implementations must embed UnimplementedTopServiceServer
// for forward compatibility
type TopServiceServer interface {
	StreamSnapshots(*SnapshotRequest, TopService_StreamSnapshotsServer) error
	mustEmbedUnimplementedTopServiceServer()
}

// UnimplementedTopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTopServiceServer struct {
}

func (UnimplementedTopServiceServer) StreamSnapshots(*SnapshotRequest, TopService_StreamSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSnapshots not implemented")
}
func (UnimplementedTopServiceServer) mustEmbedUnimplementedTopServiceServer() {}

// UnsafeTopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopServiceServer will
// result in compilation errors.
type UnsafeTopServiceServer interface {
	mustEmbedUnimplementedTopServiceServer()
}

func RegisterTopServiceServer(s grpc.ServiceRegistrar, srv TopServiceServer) {
	s.RegisterService(&TopService_ServiceDesc, srv)
}

func _TopService_StreamSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopServiceServer).StreamSnapshots(m, &topServiceStreamSnapshotsServer{stream})
}

type TopService_StreamSnapshotsServer interface {
	Send(*Snapshot) error
	grpc.ServerStream
}

type topServiceStreamSnapshotsServer struct {
	grpc.ServerStream
}

func (x *topServiceStreamSnapshotsServer) Send(m *Snapshot) error {
	return x.ServerStream.SendMsg(m)
}

// TopService_ServiceDesc is the grpc.ServiceDesc for TopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "topService.TopService",
	HandlerType: (*TopServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshots",
			Handler:       _TopService_StreamSnapshots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/TopService.proto",
}
